//imports
require("dotenv").config()
const express = require("express")
const router = require("./routes/user.routes")
const TelegramBot = require("node-telegram-bot-api")
const UserController = require("./controller/user.controller")
const Notifier = require("./notifier")
const documentation = require("./messages/documentation")
//functions

const token = process.env.TOKEN

const bot = new TelegramBot(token, { polling: true })
const PORT = 5000
const app = express()

app.use(express.json())
app.use("/api", router)

bot.on("message", async (msg) => {
	const chatId = msg.chat.id
	const userId = msg.from.id
	const name = msg.from.first_name
	const username = msg.from.username || null
	const text = msg.text
	const allowedUserIds = [204688184, 1201116054]
	const chatStates = {}
	try {
		if (allowedUserIds.includes(userId)) {
			switch (text) {
				case "/orders":
					const orders = await UserController.getStatusPaid()

					if (orders.length === 0) {
						await bot.sendMessage(chatId, "–ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
					} else {
						// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
						let message = "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n"

						orders.forEach((user) => {
							message += "„Ö§„Ö§„Ö§„Ö§„Ö§üìã –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
							message += `üÜî ${user.userId}\n`
							message += `üë§ –§–ò–û: ${user.userFio}\n`
							message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phoneNumber}\n`
							message += `üì¶ –ê–¥—Ä–µ—Å: ${user.userAdress}\n`
							message += `\n`
							message += `„Ö§„Ö§„Ö§„Ö§„Ö§üìã –ó–∞–∫–∞–∑—ã:\n`

							user.userOrder.forEach((order) => {
								message += `üè∑Ô∏è ${order.name}\n ‚úÖ ${order.status}\n üíπ ${order.price}‚ÇΩ\n ‚Ññ ${order.order_id}\n üìê ${order.size} (EU)\n üïó${order.time}\n\n`
							})

							message += ""
							message += `‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n`
						})

						await bot.sendMessage(chatId, message)
					}
					break

				// –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–¥–µ—Å—å
				case "/documentation":
					await bot.sendMessage(chatId, documentation, { parse_mode: "HTML" })
					break

				case "/AllOrders":
					const AllOrders = await UserController.getAllOrders()

					if (AllOrders.length === 0) {
						await bot.sendMessage(chatId, "–ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
					} else {
						// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
						let message = "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n"

						AllOrders.forEach((user) => {
							message += "„Ö§„Ö§„Ö§„Ö§„Ö§üìã –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
							message += `üÜî ${user.userId}\n`
							message += `üë§ –§–ò–û: ${user.userFio}\n`
							message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phoneNumber}\n`
							message += `üì¶ –ê–¥—Ä–µ—Å: ${user.userAdress}\n`
							message += `\n`
							message += `„Ö§„Ö§„Ö§„Ö§„Ö§üìã –ó–∞–∫–∞–∑—ã:\n`

							user.userOrder.forEach((order) => {
								message += `üè∑Ô∏è ${order.name}\n ‚úÖ ${order.status}\n üíπ ${order.price}‚ÇΩ\n ‚Ññ ${order.order_id}\n üìê ${order.size} (EU)\n\n`
							})

							message += ""
							message += `‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n`
						})

						await bot.sendMessage(chatId, message)
					}
					break

				case "/change":
					await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ <b>userId</b>", {
						parse_mode: "HTML",
					})

					// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					chatStates[chatId] = { step: 1 } // –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥

					bot.onText(/[0-9]+/, async (msg) => {
						const chatState = chatStates[chatId]

						if (!chatState || chatState.step !== 1) {
							// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω—É–∂–Ω–æ–º —à–∞–≥–µ
							return
						}

						const userId = msg.text

						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –æ order_id
						await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä <b>order_id</b>", {
							parse_mode: "HTML",
						})

						chatState.step = 2
						chatState.userId = userId

						bot.onText(/[0-9]+/, async (msg) => {
							const chatState = chatStates[chatId]

							if (!chatState || chatState.step !== 2) {
								// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω—É–∂–Ω–æ–º —à–∞–≥–µ
								return
							}

							const order_id = msg.text

							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –æ newStatus
							await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>—Å—Ç–∞—Ç—É—Å</b>", {
								parse_mode: "HTML",
							})

							chatState.step = 3
							chatState.order_id = order_id

							bot.onText(/[A-Za-z]+/, async (msg) => {
								const chatState = chatStates[chatId]

								if (!chatState || chatState.step !== 3) {
									// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω—É–∂–Ω–æ–º —à–∞–≥–µ
									return
								}

								const newStatus = msg.text

								if (newStatus.toLowerCase() === "/cancel") {
									// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ
									delete chatStates[chatId]
									await bot.sendMessage(chatId, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
									return
								}

								try {
									const result = await UserController.getChangeStatus({
										body: {
											userId: chatState.userId,
											order_id: chatState.order_id,
											newStatus: newStatus,
										},
									})

									// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
									const message = `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \nüÜî ${chatState.userId}\n ‚Ññ ${chatState.order_id}\n ‚úÖ ${newStatus}`
									await bot.sendMessage(chatId, message)

									// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
									delete chatStates[chatId]
								} catch (error) {
									console.error(
										"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:",
										error
									)
									await bot.sendMessage(
										chatId,
										"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞."
									)

									// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
									delete chatStates[chatId]
								}
							})
						})
					})
					break
				case "/cancel":
					const keyboardMarkup = {
						keyboard: [["/cancel"]],
						resize_keyboard: true,
						one_time_keyboard: true,
					}
					await bot.sendMessage(chatId, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
						parse_mode: "HTML",
						reply_markup: JSON.stringify(keyboardMarkup),
					})
					return
			}
		}
	} catch (error) {
		console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã", error)
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç
		await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
	}
})

app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç–µ ` + PORT))
